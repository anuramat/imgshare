// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImgShareClient is the client API for ImgShare service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImgShareClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	ReadUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	CreateImage(ctx context.Context, in *ImageAuthRequest, opts ...grpc.CallOption) (*Image, error)
	ReadImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Image, error)
	GetRandomImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Image, error)
	SetDescriptionImage(ctx context.Context, in *ImageAuthRequest, opts ...grpc.CallOption) (*Image, error)
	UpvoteImage(ctx context.Context, in *ImageAuthRequest, opts ...grpc.CallOption) (*Image, error)
	DownvoteImage(ctx context.Context, in *ImageAuthRequest, opts ...grpc.CallOption) (*Image, error)
	DeleteImage(ctx context.Context, in *ImageAuthRequest, opts ...grpc.CallOption) (*Empty, error)
	// HW-2 requirement
	GetAllImages(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Images, error)
}

type imgShareClient struct {
	cc grpc.ClientConnInterface
}

func NewImgShareClient(cc grpc.ClientConnInterface) ImgShareClient {
	return &imgShareClient{cc}
}

func (c *imgShareClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.ImgShare/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgShareClient) ReadUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.ImgShare/ReadUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgShareClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.ImgShare/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgShareClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.ImgShare/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgShareClient) CreateImage(ctx context.Context, in *ImageAuthRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.ImgShare/CreateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgShareClient) ReadImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.ImgShare/ReadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgShareClient) GetRandomImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.ImgShare/GetRandomImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgShareClient) SetDescriptionImage(ctx context.Context, in *ImageAuthRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.ImgShare/SetDescriptionImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgShareClient) UpvoteImage(ctx context.Context, in *ImageAuthRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.ImgShare/UpvoteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgShareClient) DownvoteImage(ctx context.Context, in *ImageAuthRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.ImgShare/DownvoteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgShareClient) DeleteImage(ctx context.Context, in *ImageAuthRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.ImgShare/DeleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgShareClient) GetAllImages(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Images, error) {
	out := new(Images)
	err := c.cc.Invoke(ctx, "/api.ImgShare/GetAllImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImgShareServer is the server API for ImgShare service.
// All implementations must embed UnimplementedImgShareServer
// for forward compatibility
type ImgShareServer interface {
	CreateUser(context.Context, *User) (*User, error)
	ReadUser(context.Context, *User) (*User, error)
	UpdateUser(context.Context, *User) (*User, error)
	DeleteUser(context.Context, *User) (*User, error)
	CreateImage(context.Context, *ImageAuthRequest) (*Image, error)
	ReadImage(context.Context, *Image) (*Image, error)
	GetRandomImage(context.Context, *Empty) (*Image, error)
	SetDescriptionImage(context.Context, *ImageAuthRequest) (*Image, error)
	UpvoteImage(context.Context, *ImageAuthRequest) (*Image, error)
	DownvoteImage(context.Context, *ImageAuthRequest) (*Image, error)
	DeleteImage(context.Context, *ImageAuthRequest) (*Empty, error)
	// HW-2 requirement
	GetAllImages(context.Context, *Page) (*Images, error)
	mustEmbedUnimplementedImgShareServer()
}

// UnimplementedImgShareServer must be embedded to have forward compatible implementations.
type UnimplementedImgShareServer struct {
}

func (UnimplementedImgShareServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedImgShareServer) ReadUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUser not implemented")
}
func (UnimplementedImgShareServer) UpdateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedImgShareServer) DeleteUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedImgShareServer) CreateImage(context.Context, *ImageAuthRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImage not implemented")
}
func (UnimplementedImgShareServer) ReadImage(context.Context, *Image) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadImage not implemented")
}
func (UnimplementedImgShareServer) GetRandomImage(context.Context, *Empty) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomImage not implemented")
}
func (UnimplementedImgShareServer) SetDescriptionImage(context.Context, *ImageAuthRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDescriptionImage not implemented")
}
func (UnimplementedImgShareServer) UpvoteImage(context.Context, *ImageAuthRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpvoteImage not implemented")
}
func (UnimplementedImgShareServer) DownvoteImage(context.Context, *ImageAuthRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownvoteImage not implemented")
}
func (UnimplementedImgShareServer) DeleteImage(context.Context, *ImageAuthRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedImgShareServer) GetAllImages(context.Context, *Page) (*Images, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllImages not implemented")
}
func (UnimplementedImgShareServer) mustEmbedUnimplementedImgShareServer() {}

// UnsafeImgShareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImgShareServer will
// result in compilation errors.
type UnsafeImgShareServer interface {
	mustEmbedUnimplementedImgShareServer()
}

func RegisterImgShareServer(s grpc.ServiceRegistrar, srv ImgShareServer) {
	s.RegisterService(&ImgShare_ServiceDesc, srv)
}

func _ImgShare_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgShareServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImgShare/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgShareServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgShare_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgShareServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImgShare/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgShareServer).ReadUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgShare_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgShareServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImgShare/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgShareServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgShare_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgShareServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImgShare/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgShareServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgShare_CreateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgShareServer).CreateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImgShare/CreateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgShareServer).CreateImage(ctx, req.(*ImageAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgShare_ReadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgShareServer).ReadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImgShare/ReadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgShareServer).ReadImage(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgShare_GetRandomImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgShareServer).GetRandomImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImgShare/GetRandomImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgShareServer).GetRandomImage(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgShare_SetDescriptionImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgShareServer).SetDescriptionImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImgShare/SetDescriptionImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgShareServer).SetDescriptionImage(ctx, req.(*ImageAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgShare_UpvoteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgShareServer).UpvoteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImgShare/UpvoteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgShareServer).UpvoteImage(ctx, req.(*ImageAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgShare_DownvoteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgShareServer).DownvoteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImgShare/DownvoteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgShareServer).DownvoteImage(ctx, req.(*ImageAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgShare_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgShareServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImgShare/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgShareServer).DeleteImage(ctx, req.(*ImageAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgShare_GetAllImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgShareServer).GetAllImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImgShare/GetAllImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgShareServer).GetAllImages(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

// ImgShare_ServiceDesc is the grpc.ServiceDesc for ImgShare service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImgShare_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ImgShare",
	HandlerType: (*ImgShareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _ImgShare_CreateUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _ImgShare_ReadUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ImgShare_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ImgShare_DeleteUser_Handler,
		},
		{
			MethodName: "CreateImage",
			Handler:    _ImgShare_CreateImage_Handler,
		},
		{
			MethodName: "ReadImage",
			Handler:    _ImgShare_ReadImage_Handler,
		},
		{
			MethodName: "GetRandomImage",
			Handler:    _ImgShare_GetRandomImage_Handler,
		},
		{
			MethodName: "SetDescriptionImage",
			Handler:    _ImgShare_SetDescriptionImage_Handler,
		},
		{
			MethodName: "UpvoteImage",
			Handler:    _ImgShare_UpvoteImage_Handler,
		},
		{
			MethodName: "DownvoteImage",
			Handler:    _ImgShare_DownvoteImage_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _ImgShare_DeleteImage_Handler,
		},
		{
			MethodName: "GetAllImages",
			Handler:    _ImgShare_GetAllImages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
