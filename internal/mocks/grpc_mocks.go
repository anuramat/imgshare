// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/api_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "gitlab.ozon.dev/anuramat/homework-1/internal/api"
	grpc "google.golang.org/grpc"
)

// MockImgShareClient is a mock of ImgShareClient interface.
type MockImgShareClient struct {
	ctrl     *gomock.Controller
	recorder *MockImgShareClientMockRecorder
}

// MockImgShareClientMockRecorder is the mock recorder for MockImgShareClient.
type MockImgShareClientMockRecorder struct {
	mock *MockImgShareClient
}

// NewMockImgShareClient creates a new mock instance.
func NewMockImgShareClient(ctrl *gomock.Controller) *MockImgShareClient {
	mock := &MockImgShareClient{ctrl: ctrl}
	mock.recorder = &MockImgShareClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImgShareClient) EXPECT() *MockImgShareClientMockRecorder {
	return m.recorder
}

// CreateImage mocks base method.
func (m *MockImgShareClient) CreateImage(ctx context.Context, in *api.ImageAuthRequest, opts ...grpc.CallOption) (*api.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateImage", varargs...)
	ret0, _ := ret[0].(*api.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockImgShareClientMockRecorder) CreateImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockImgShareClient)(nil).CreateImage), varargs...)
}

// DeleteImage mocks base method.
func (m *MockImgShareClient) DeleteImage(ctx context.Context, in *api.ImageAuthRequest, opts ...grpc.CallOption) (*api.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteImage", varargs...)
	ret0, _ := ret[0].(*api.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockImgShareClientMockRecorder) DeleteImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockImgShareClient)(nil).DeleteImage), varargs...)
}

// DownvoteImage mocks base method.
func (m *MockImgShareClient) DownvoteImage(ctx context.Context, in *api.ImageAuthRequest, opts ...grpc.CallOption) (*api.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownvoteImage", varargs...)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownvoteImage indicates an expected call of DownvoteImage.
func (mr *MockImgShareClientMockRecorder) DownvoteImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownvoteImage", reflect.TypeOf((*MockImgShareClient)(nil).DownvoteImage), varargs...)
}

// GetAllImages mocks base method.
func (m *MockImgShareClient) GetAllImages(ctx context.Context, in *api.Page, opts ...grpc.CallOption) (*api.Images, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllImages", varargs...)
	ret0, _ := ret[0].(*api.Images)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllImages indicates an expected call of GetAllImages.
func (mr *MockImgShareClientMockRecorder) GetAllImages(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllImages", reflect.TypeOf((*MockImgShareClient)(nil).GetAllImages), varargs...)
}

// GetGalleryImage mocks base method.
func (m *MockImgShareClient) GetGalleryImage(ctx context.Context, in *api.GalleryRequest, opts ...grpc.CallOption) (*api.GalleryImage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGalleryImage", varargs...)
	ret0, _ := ret[0].(*api.GalleryImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGalleryImage indicates an expected call of GetGalleryImage.
func (mr *MockImgShareClientMockRecorder) GetGalleryImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGalleryImage", reflect.TypeOf((*MockImgShareClient)(nil).GetGalleryImage), varargs...)
}

// GetRandomImage mocks base method.
func (m *MockImgShareClient) GetRandomImage(ctx context.Context, in *api.Empty, opts ...grpc.CallOption) (*api.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRandomImage", varargs...)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomImage indicates an expected call of GetRandomImage.
func (mr *MockImgShareClientMockRecorder) GetRandomImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomImage", reflect.TypeOf((*MockImgShareClient)(nil).GetRandomImage), varargs...)
}

// ReadImage mocks base method.
func (m *MockImgShareClient) ReadImage(ctx context.Context, in *api.Image, opts ...grpc.CallOption) (*api.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadImage", varargs...)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadImage indicates an expected call of ReadImage.
func (mr *MockImgShareClientMockRecorder) ReadImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadImage", reflect.TypeOf((*MockImgShareClient)(nil).ReadImage), varargs...)
}

// SetDescriptionImage mocks base method.
func (m *MockImgShareClient) SetDescriptionImage(ctx context.Context, in *api.ImageAuthRequest, opts ...grpc.CallOption) (*api.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetDescriptionImage", varargs...)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDescriptionImage indicates an expected call of SetDescriptionImage.
func (mr *MockImgShareClientMockRecorder) SetDescriptionImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDescriptionImage", reflect.TypeOf((*MockImgShareClient)(nil).SetDescriptionImage), varargs...)
}

// UpvoteImage mocks base method.
func (m *MockImgShareClient) UpvoteImage(ctx context.Context, in *api.ImageAuthRequest, opts ...grpc.CallOption) (*api.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpvoteImage", varargs...)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpvoteImage indicates an expected call of UpvoteImage.
func (mr *MockImgShareClientMockRecorder) UpvoteImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpvoteImage", reflect.TypeOf((*MockImgShareClient)(nil).UpvoteImage), varargs...)
}

// MockImgShareServer is a mock of ImgShareServer interface.
type MockImgShareServer struct {
	ctrl     *gomock.Controller
	recorder *MockImgShareServerMockRecorder
}

// MockImgShareServerMockRecorder is the mock recorder for MockImgShareServer.
type MockImgShareServerMockRecorder struct {
	mock *MockImgShareServer
}

// NewMockImgShareServer creates a new mock instance.
func NewMockImgShareServer(ctrl *gomock.Controller) *MockImgShareServer {
	mock := &MockImgShareServer{ctrl: ctrl}
	mock.recorder = &MockImgShareServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImgShareServer) EXPECT() *MockImgShareServerMockRecorder {
	return m.recorder
}

// CreateImage mocks base method.
func (m *MockImgShareServer) CreateImage(arg0 context.Context, arg1 *api.ImageAuthRequest) (*api.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", arg0, arg1)
	ret0, _ := ret[0].(*api.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockImgShareServerMockRecorder) CreateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockImgShareServer)(nil).CreateImage), arg0, arg1)
}

// DeleteImage mocks base method.
func (m *MockImgShareServer) DeleteImage(arg0 context.Context, arg1 *api.ImageAuthRequest) (*api.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0, arg1)
	ret0, _ := ret[0].(*api.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockImgShareServerMockRecorder) DeleteImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockImgShareServer)(nil).DeleteImage), arg0, arg1)
}

// DownvoteImage mocks base method.
func (m *MockImgShareServer) DownvoteImage(arg0 context.Context, arg1 *api.ImageAuthRequest) (*api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownvoteImage", arg0, arg1)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownvoteImage indicates an expected call of DownvoteImage.
func (mr *MockImgShareServerMockRecorder) DownvoteImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownvoteImage", reflect.TypeOf((*MockImgShareServer)(nil).DownvoteImage), arg0, arg1)
}

// GetAllImages mocks base method.
func (m *MockImgShareServer) GetAllImages(arg0 context.Context, arg1 *api.Page) (*api.Images, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllImages", arg0, arg1)
	ret0, _ := ret[0].(*api.Images)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllImages indicates an expected call of GetAllImages.
func (mr *MockImgShareServerMockRecorder) GetAllImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllImages", reflect.TypeOf((*MockImgShareServer)(nil).GetAllImages), arg0, arg1)
}

// GetGalleryImage mocks base method.
func (m *MockImgShareServer) GetGalleryImage(arg0 context.Context, arg1 *api.GalleryRequest) (*api.GalleryImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGalleryImage", arg0, arg1)
	ret0, _ := ret[0].(*api.GalleryImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGalleryImage indicates an expected call of GetGalleryImage.
func (mr *MockImgShareServerMockRecorder) GetGalleryImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGalleryImage", reflect.TypeOf((*MockImgShareServer)(nil).GetGalleryImage), arg0, arg1)
}

// GetRandomImage mocks base method.
func (m *MockImgShareServer) GetRandomImage(arg0 context.Context, arg1 *api.Empty) (*api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomImage", arg0, arg1)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomImage indicates an expected call of GetRandomImage.
func (mr *MockImgShareServerMockRecorder) GetRandomImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomImage", reflect.TypeOf((*MockImgShareServer)(nil).GetRandomImage), arg0, arg1)
}

// ReadImage mocks base method.
func (m *MockImgShareServer) ReadImage(arg0 context.Context, arg1 *api.Image) (*api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadImage", arg0, arg1)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadImage indicates an expected call of ReadImage.
func (mr *MockImgShareServerMockRecorder) ReadImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadImage", reflect.TypeOf((*MockImgShareServer)(nil).ReadImage), arg0, arg1)
}

// SetDescriptionImage mocks base method.
func (m *MockImgShareServer) SetDescriptionImage(arg0 context.Context, arg1 *api.ImageAuthRequest) (*api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDescriptionImage", arg0, arg1)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDescriptionImage indicates an expected call of SetDescriptionImage.
func (mr *MockImgShareServerMockRecorder) SetDescriptionImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDescriptionImage", reflect.TypeOf((*MockImgShareServer)(nil).SetDescriptionImage), arg0, arg1)
}

// UpvoteImage mocks base method.
func (m *MockImgShareServer) UpvoteImage(arg0 context.Context, arg1 *api.ImageAuthRequest) (*api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpvoteImage", arg0, arg1)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpvoteImage indicates an expected call of UpvoteImage.
func (mr *MockImgShareServerMockRecorder) UpvoteImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpvoteImage", reflect.TypeOf((*MockImgShareServer)(nil).UpvoteImage), arg0, arg1)
}

// mustEmbedUnimplementedImgShareServer mocks base method.
func (m *MockImgShareServer) mustEmbedUnimplementedImgShareServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedImgShareServer")
}

// mustEmbedUnimplementedImgShareServer indicates an expected call of mustEmbedUnimplementedImgShareServer.
func (mr *MockImgShareServerMockRecorder) mustEmbedUnimplementedImgShareServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedImgShareServer", reflect.TypeOf((*MockImgShareServer)(nil).mustEmbedUnimplementedImgShareServer))
}

// MockUnsafeImgShareServer is a mock of UnsafeImgShareServer interface.
type MockUnsafeImgShareServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeImgShareServerMockRecorder
}

// MockUnsafeImgShareServerMockRecorder is the mock recorder for MockUnsafeImgShareServer.
type MockUnsafeImgShareServerMockRecorder struct {
	mock *MockUnsafeImgShareServer
}

// NewMockUnsafeImgShareServer creates a new mock instance.
func NewMockUnsafeImgShareServer(ctrl *gomock.Controller) *MockUnsafeImgShareServer {
	mock := &MockUnsafeImgShareServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeImgShareServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeImgShareServer) EXPECT() *MockUnsafeImgShareServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedImgShareServer mocks base method.
func (m *MockUnsafeImgShareServer) mustEmbedUnimplementedImgShareServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedImgShareServer")
}

// mustEmbedUnimplementedImgShareServer indicates an expected call of mustEmbedUnimplementedImgShareServer.
func (mr *MockUnsafeImgShareServerMockRecorder) mustEmbedUnimplementedImgShareServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedImgShareServer", reflect.TypeOf((*MockUnsafeImgShareServer)(nil).mustEmbedUnimplementedImgShareServer))
}
